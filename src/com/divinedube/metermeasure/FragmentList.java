package com.divinedube.metermeasure;

import android.app.ListFragment;
import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.SimpleCursorAdapter;

/**
 * Created by Divine Dube on 2014/06/29.
 */
public class FragmentList extends ListFragment implements LoaderManager.LoaderCallbacks<Cursor>{

    private static final String TAG = FragmentList.class.getSimpleName();

    private static final String[] FROM = {
            MeterReadingsContract.Column.ID,
            MeterReadingsContract.Column.DAY,
            MeterReadingsContract.Column.TIME,
            MeterReadingsContract.Column.READING,
            MeterReadingsContract.Column.NOTE
    };
    private static final int[] TO = {
            android.R.id.empty,
            R.id.list_item_textViewDayMain,
            R.id.list_item_textViewTimeMain,
            R.id.list_item_textViewReadingMain,
            R.id.list_item_textViewNoteMain
    };
    private static final int LOADER_ID = 36;
    private SimpleCursorAdapter mAdapter;
    private Cursor mCursor;

    @Override
    public void onActivityCreated(Bundle savedInstance){
        super.onActivityCreated(savedInstance);
        setEmptyText("Searching for Saved Meter Readings...");

        DbHelper dbHelper = new DbHelper(getActivity());
        SQLiteDatabase db = dbHelper.getReadableDatabase();

        //mCursor = db.query(MeterReadingsContract.TABLE, FROM, null,null,null,null, MeterReadingsContract.DEFAULT_SORT);
        mAdapter = new SimpleCursorAdapter(getActivity(), R.layout.list_item, null, FROM, TO, 0);
      //  mAdapter.setViewBinder(VIEW_BINDER); for some data tha i want to add at run  time which is the diff
        setListAdapter(mAdapter);

        getLoaderManager().initLoader(LOADER_ID,null,this);
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        if (id != id) return null;
        Log.d(TAG, "onCreate Loader");

        return new CursorLoader(
                getActivity(),MeterReadingsContract.CONTENT_URI, null, null, null, MeterReadingsContract.DEFAULT_SORT);
    }

    /**
     * Called when a previously created loader has finished its load.  Note
     * that normally an application is <em>not</em> allowed to commit fragment
     * transactions while in this call, since it can happen after an
     * activity's state is saved.
     * <p/>
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader.  At this point
     * you should remove all use of the old data (since it will be released
     * soon), but should not do your own release of the data since its Loader
     * owns it and will take care of that.  The Loader will take care of
     * management of its data so you don't have to.  In particular:
     * <p/>
     * <ul>
     * <li> <p>The Loader will monitor for changes to the data, and report
     * them to you through new calls here.  You should not monitor the
     * data yourself.  For example, if the data is a {@link android.database.Cursor}
     * and you place it in a {@link android.widget.CursorAdapter}, use
     * the {@link android.widget.CursorAdapter#CursorAdapter(android.content.Context,
     * android.database.Cursor, int)} constructor <em>without</em> passing
     * in either {@link android.widget.CursorAdapter#FLAG_AUTO_REQUERY}
     * or {@link android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER}
     * (that is, use 0 for the flags argument).  This prevents the CursorAdapter
     * from doing its own observing of the Cursor, which is not needed since
     * when a change happens you will get a new Cursor throw another call
     * here.
     * <li> The Loader will release the data once it knows the application
     * is no longer using it.  For example, if the data is
     * a {@link android.database.Cursor} from a {@link android.content.CursorLoader},
     * you should not call close() on it yourself.  If the Cursor is being placed in a
     * {@link android.widget.CursorAdapter}, you should use the
     * {@link android.widget.CursorAdapter#swapCursor(android.database.Cursor)}
     * method so that the old Cursor is not closed.
     * </ul>
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        mAdapter.swapCursor(data);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
       mAdapter.swapCursor(null);
    }

//   TODO after a long click let people delete and edit the data
// public void registerForContextMenu(View view) {
//        super.registerForContextMenu(view);
    //check out
//    }
}